###import pacakges

import os
import pandas as pd
import datetime
import time
import random
from bs4 import BeautifulSoup
from selenium import webdriver
###set up path
pd.set_option('display.max_rows', 10)
pd.set_option('display.max_columns', 5)
pd.set_option('display.width',800)
path = 'C:/Users/Macbook/Downloads/archive'
os.chdir(path)

explanation = """
to write a crawler you need 
    1) https://sites.google.com/chromium.org/driver/
    2) https://github.com/mozilla/geckodriver/releases
"""
os.chdir('C:/Users/Macbook/Downloads/archive')


# choosing scraper, and set up chrome web drivers
chosen_driver=['Chrome','Firefox'][0]
if chosen_driver=='Chrome':
    driver    = webdriver.Chrome()
if chosen_driver=='Firefox':
    driver    = webdriver.Firefox()

# Scraping Carfax. com
links_to_scrape = ['https://www.carfax.com/Used-Maserati_m51']
l        = 0
one_link = links_to_scrape[l]
driver.get(one_link)

reviews_one_store = []
condition = True

#collect all reviews, scrapping a certain area on the page
while (condition):
    reviews           = driver.find_elements_by_xpath("//div[@class='great-value value-badge-srp']")
    r                 = 0
    for r in range(len(reviews)):
        one_review                   = {}
        one_review['scrapping_date'] = datetime.datetime.now()
        one_review['url']     = driver.current_url
        #soup                         = BeautifulSoup(reviews[r].get_attribute('innerHTML')) 
        try:
            one_review_raw = reviews[r].get_attribute('innerHTML')
        except:
            one_review_raw = ""
        one_review['review_raw'] = one_review_raw

        reviews_one_store.append(one_review)
    try:
        driver.find_element_by_xpath("//button[@class='button primary-blue pagination__button pagination__button--right ]").click()
        time.sleep(random.randint(1,3))
    except:
        break  
    
# Transform data to a dataframe
a = pd.DataFrame.from_dict(reviews_one_store)
b = a.copy()
b['review_raw'][1]

b['Price'] = b['review_raw'].map(lambda b: BeautifulSoup(b).text).str.extract('([0-9][0-9],[0-9][0-9][0-9])')###Casue the price is xx,xxx, we can just extract the certain price by using beautiful soup
b = b[['Price']] ###extract a certain item
b.to_csv('Prices.csv', index = True) ####put the collected data to csv for compute mean, max&min price of certain model of car in secondary car market
driver.close()
